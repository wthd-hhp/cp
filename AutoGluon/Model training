import autogluon as ag
import pandas as pd
import numpy as np
import os,urllib
import matplotlib.pyplot as plt
from autogluon.tabular import TabularDataset, TabularPredictor
from sklearn.metrics import r2_score
from sklearn.model_selection import train_test_split

data= pd.read_excel("autogluon 3 features.xlsx",index_col=0)
random_data = data.sample(frac =1).reset_index(drop=True)
random_data
random_data_de_name = random_data.iloc[:,0:]
random_data_de_name

# 第二步：分割数据为训练集和测试集
train_data, test_data = train_test_split(random_data_de_name, test_size=0.3, random_state=42) 
label_column = 'Cp'
label_column
predictor = TabularPredictor(label=label_column,eval_metric="r2",problem_type="regression").fit(train_data, 
                                                                                                tuning_data=test_data, 
                                                                                                presets='best_quality',
                                                                                                use_bag_holdout=True,
                                                                                                #path='25-flu-autogluon',
                                                                                                #time_limit = 72000,
                                                                                                auto_stack=True, 
                                                                                                hyperparameters='multimodal',
                                                                                                #feature_prune_kwargs={'prune_threshold': 0.01},
                                                                                                num_bag_folds=5,
                                                                                               )
#保存最佳模型
predictor.save(silent=True)

predictor.path
predictor.leaderboard(train_data)
predictor.leaderboard(test_data)
predictor.predict(train_data)
predictor.leaderboard(test_data, extra_metrics=['mae', 'rmse',  'pearsonr'], silent=True)
predictor.leaderboard(train_data, extra_metrics=['mae', 'rmse',  'pearsonr'], silent=True)
train_data.to_excel("_train_data.xlsx")
test_data.to_excel("test_data.xlsx")
